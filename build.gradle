buildscript {
    ext {
        kotlinVersion = '1.2.41'
        springCloudVersion = 'Finchley.RELEASE'
        springBootVersion = '2.0.3.RELEASE'
        grpcVersion = '1.10.0'
        protobufVersion = '3.5.1-1'
    }
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

allprojects {
    version = "2.0.0"
}

subprojects {
    apply plugin: "java"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    def defaultEncoding = 'UTF-8'
    tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'kotlin-jpa'

    group = 'com.ekocaman'
    version = '0.0.1-SNAPSHOT'
    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    javadoc {
        options.encoding = defaultEncoding
        options.addBooleanOption('Xdoclint:none', true)
    }

    compileJava.dependsOn(processResources)

    test {
        include "**/model/**", "**/controller/**", "**/usecase/**", "**/util/**", "**/context/**"
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/release" }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
        compile('com.netflix.feign:feign-jackson:8.18.0')

        compile('com.fasterxml.jackson.module:jackson-module-kotlin')
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        compile("org.jetbrains.kotlin:kotlin-reflect")
        compile("com.h2database:h2")

        compile('io.grpc:grpc-all:1.13.1')
        compile('io.grpc:grpc-protobuf:1.13.1')
        compile('io.grpc:grpc-stub:1.13.1')

        compile('org.lognet:grpc-spring-boot-starter:2.4.0')

        compile('org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.3')

        compile('com.squareup.retrofit2:retrofit:2.3.0')
//        compile('com.squareup.retrofit2:converter-gson:2.3.0')
        compile('com.squareup.retrofit2:converter-jackson:2.3.0')
        compile('io.reactivex.rxjava2:rxjava:2.1.7')
        compile('com.squareup.retrofit2:adapter-rxjava2:2.3.0')

        compile('io.github.microutils:kotlin-logging:1.5.4')

        testCompile('org.springframework.boot:spring-boot-starter-test') {
            exclude module: 'junit'
        }
        testImplementation('org.junit.jupiter:junit-jupiter-api')
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    }
}

project(':movie-service') {

    apply plugin: 'org.springframework.boot'

    springBoot {
        buildInfo()
    }

    dependencies {
        compile project(':common')
    }
}

project(':review-service') {
    dependencies {

    }
}
